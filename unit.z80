org 32768

;    jp go
    call test_f24 ;         1: 46E900
    call wat

    call addtoVec2_test ;   2: 400000 410000
    call wat

    call subfromVec2_test ; 3: C00000 400000
    call wat

    call sumVec2_test ;     4: 42E000 40C000
    call wat

    call diffVec2_test ;    5: C1C000 C12000
    call wat

    call minusVec2_test ;   6: C10000 C00000
    call wat

    call scaleVec2_test ;   7: C00000 BF0000
    call wat

    call scaledVec2_test ;  8: C00000 BF0000
    call wat

    call Transpose_test ;   9: 400000 410000 / C00000 BF0000
    call wat

    call initMat22_test ;   A: 3EBB67 BDFFFD / 3DFFFD 3EBB67
    call wat

    call matmul_test ;      B: 410000 42E000
    call wat

    call matmulMM_test ;    C: 410000 C30000 / 420000 41A000
    call wat

    call Dot_test ;         D: 441000
    call wat

    call Crossvv_test ;     E: C24000
    call wat

    call Absv_test ;        F: 410000 400000
    call wat

    call AbsM_test ;       10: 400000 400000 / 410000 3E0000
    call wat

    call Flip_test ;       11: 03 04 01 02
    call wat
    
    call ComputeIncidentEdge_test ; 12:  449000 800000 xxxx0401 / C49000 800000 xxxx0102
    call wat
    
go: call ClipSegmentToLine_test ;   13: 02 / 449000 000000 00 00 04 01/ BDFF80 000000 00 02 01 00
    call wat

    call ClipSegmentToLine_test2 ;  14: 02 / BE0000 000000 00 02 01 00/ 3E0000 000000 04 00 00 01
    call wat
    
    call Collide_test ; 15: 02 / BDFF80 B847A0 / 000000 BF0000 00 02 01 00
    call wat;                    3E0000 B847A0 / 000000 BF0000 04 00 00 01

    ret

; ----------------------------------------------
; ComputeIncidentEdge_test
; ----------------------------------------------

CIE_h:
db $44,$90,$00, $42,$40,$00 ; 50 10

CIE_pos:
db 0,0,0, $C2,$40,$00; 0 -10

CIE_Rot:
db $3F,0,0, 0,0,0  ; 1 0
db 0,0,0, $3F,0,0  ; 0 1

CIE_normal
db 0,0,0, $BF,0,0 ; 0 -1

CIE_c:
ds 20; ClipVertex*2
    
ComputeIncidentEdge_test:

    ld ix,CIE_c

    ld hl,CIE_h
    ld de,ComputeIncidentEdge_h
    ld bc,Vec2
    ldir
    
    ld hl,CIE_pos
    ld de,ComputeIncidentEdge_pos
    ld bc,Vec2
    ldir

    ld hl,CIE_Rot
    ld de,ComputeIncidentEdge_Rot
    ld bc,Mat22
    ldir
    
    ld hl,CIE_normal
    ld de,ComputeIncidentEdge_normal
    ld bc,Vec2
    ldir
    
    call ComputeIncidentEdge
    
    ld ix,CIE_c ; c[0].v
    call writeVec2

    ld a,(CIE_c+ClipVertex_fp); c[0].fp
    call writeByte

    ld a,(CIE_c+ClipVertex_fp+1)
    call writeByte

    ld a,(CIE_c+ClipVertex_fp+2)
    call writeByte

    ld a,(CIE_c+ClipVertex_fp+3)
    call writeByte

    ld ix,CIE_c+ClipVertex ; c[1].v
    call writeVec2

    ld a,(CIE_c+ClipVertex+ClipVertex_fp); c[1].fp
    call writeByte

    ld a,(CIE_c+ClipVertex+ClipVertex_fp+1)
    call writeByte

    ld a,(CIE_c+ClipVertex+ClipVertex_fp+2)
    call writeByte

    ld a,(CIE_c+ClipVertex+ClipVertex_fp+3)
    call writeByte
    ret

; ---------------------------------------------------------
; ClipSegmentToLine_test
; ---------------------------------------------------------

CSTL_vIn:
db $44,$90,0, 0,0,0 ; v=50 0
db 0,0,4,1 ; fp

db $c4,$90,0, 0,0,0 ; v=-50 0
db 0,0,1,2 ; fp

CSTL_normal:
db $BF,0,0, 0,0,0; -1 0

CSTL_offset 
db $3E,0,0 ; 0.5

CSTL_clipEdge
db 2

CSTL_vOut: 
ds 20; ClipVertex*2

ClipSegmentToLine_test:

    ld ix,CSTL_vOut
    ld iy,CSTL_vIn

    ld hl,CSTL_normal
    ld de,ClipSegmentToLine_normal
    ld bc,Vec2
    ldir

    ld hl,CSTL_offset
    ld de,ClipSegmentToLine_offset
    ld bc,3
    ldir
    
    ld a,(CSTL_clipEdge)
    ld (ClipSegmentToLine_clipEdge),a
    
CSTL1: call ClipSegmentToLine

    call writeByte

    ld ix,CSTL_vOut ; vOut[0].v
    call writeVec2

    ld a,(CSTL_vOut+ClipVertex_fp); vOut[0].fp
    call writeByte

    ld a,(CSTL_vOut+ClipVertex_fp+1)
    call writeByte

    ld a,(CSTL_vOut+ClipVertex_fp+2)
    call writeByte

    ld a,(CSTL_vOut+ClipVertex_fp+3)
    call writeByte

    ld ix,CSTL_vOut+ClipVertex ; vOut[1].v
    call writeVec2

    ld a,(CSTL_vOut+ClipVertex+ClipVertex_fp); vOut[1].fp
    call writeByte

    ld a,(CSTL_vOut+ClipVertex+ClipVertex_fp+1)
    call writeByte

    ld a,(CSTL_vOut+ClipVertex+ClipVertex_fp+2)
    call writeByte

    ld a,(CSTL_vOut+ClipVertex+ClipVertex_fp+3)
    call writeByte
    
    ret

; ---------------------------------------------------------
; ClipSegmentToLine_test2
; ---------------------------------------------------------

CSTL_vIn2:
db $44,$90,0, 0,0,0 ; v=50 0
db 0,0,4,1 ; fp

db $be,$00,0, 0,0,0 ; v=-0.5 0
db 0,2,1,0 ; fp

CSTL_normal2:
db $3F,0,0, 0,0,0; 1 0

CSTL_offset2 
db $3E,0,0 ; 0.5

CSTL_clipEdge2
db 4

ClipSegmentToLine_test2:
    ld ix,CSTL_vOut
    ld iy,CSTL_vIn2

    ld hl,CSTL_normal2
    ld de,ClipSegmentToLine_normal
    ld bc,Vec2
    ldir

    ld hl,CSTL_offset2
    ld de,ClipSegmentToLine_offset
    ld bc,3
    ldir
    
    ld a,(CSTL_clipEdge2)
    ld (ClipSegmentToLine_clipEdge),a
    
    jp CSTL1

    ret

; --------------------------------------------------------
; Collide_test
; --------------------------------------------------------

contacts: ds 49*2 ; Contact*2

bodyA: db 0,0,0, $3D,$F5,$C3, 0,0,0 ; position, rotation = (0 0.49) 0
db 0,0,0, 0,0,0, 0,0,0 ; vel, angvel =  (0 0) 0
db 0,0,0, 0,0,0, 0,0,0 ; force torque = (0 0) 0
db $3F,0,0, $3F,0,0 ; width = 1 1

; friction mass invmass I invI = 0.2 200 5e-3 33.3 0.03
db $3C,$99,$9A  ;0.2
db $46,$90,$00  ;200
db $37,$47,$AE  ;5e-3
db $44,$0A,$66  ;33.3
db $39,$EB,$85  ;0.03

bodyB:
db 0,0,0, $C2,$40,$00, 0,0,0 ; position, rotation = (0 -10) 0
db 0,0,0, 0,0,0, 0,0,0 ; vel, angvel =  (0 0) 0
db 0,0,0, 0,0,0, 0,0,0 ; force torque = (0 0) 0
db $45,$90,$00, $43,$40,$00 ; width = 100 20

; friction mass invmass I invI = 0.2 inf 0 inf 0
db $3C,$99,$9A  ;0.2
db $7F,0,0 ; inf
db 0,0,0
db $7F,0,0 ; inf
db 0,0,0

Collide_test:

    ld hl,contacts
    ld ix,bodyA
    ld iy,bodyB
    
    call Collide

    call writeByte ; numContacts

    ld ix,contacts
    call writeVec2 ;  contacts[0].position

    ld ix,contacts+Contact_normal
    call writeVec2  ; contacts[0].normal

    ld a,(contacts+Contact_feature) ; contacts[0].feature
    call writeByte

    ld a,(contacts+Contact_feature+1)
    call writeByte

    ld a,(contacts+Contact_feature+2)
    call writeByte

    ld a,(contacts+Contact_feature+3)
    call writeByte

    ld ix,contacts+Contact
    call writeVec2 ; contacts[1].position

    ld ix,contacts+Contact+Contact_normal
    call writeVec2 ; contacts[1].normal

    ld a,(contacts+Contact+Contact_feature) ; contacts[1].feature
    call writeByte

    ld a,(contacts+Contact+Contact_feature+1)
    call writeByte

    ld a,(contacts+Contact+Contact_feature+2)
    call writeByte

    ld a,(contacts+Contact+Contact_feature+3)
    call writeByte

    ret

; ----------------------------------------------------------------
; Basic test of f24 lib 
; (12*53-147)*0.5= 244.5
; print answer to screen using writeAHL
; ----------------------------------------------------------------

reslt: ds 3  ; string to store the result

test_f24:
  ld a,12

  call u8tof24 ; result on AHL

  push af
  push hl

  ld a,53
  call u8tof24 ; result on AHL

  pop de
  pop bc; b=a. need c=a
  ld c,b

  call f24mul ;  AHL * CDE

  push af
  push hl

  ld a,147
  call u8tof24; AHL

  ld c,a
  ld d,h
  ld e,l

  pop hl
  pop af

  call f24sub

  ld c,00111110b  ; 0 0111110 0000000000000000 (0.5)
  ld d,0
  ld e,0
 
  call f24mul

  call writeAHL

  ret

; ----------------------------------------------------------------
; Test addtoVec2. Pass in vector1 and vector2, sum is in vector1
; result should be (2.0, 4.0) which is shown as
; 40 00 00 41 00 00
; ----------------------------------------------------------------

vector1: db 00111111b, 0, 0,   01000000b, 0, 0 ; (1.0, 2.0)
vector2: db 00111111b, 0, 0,   01000000b, 0, 0 ; (1.0, 2.0)

addtoVec2_test:
  ld ix,vector1

  ld hl,vector2
  ld de,addtoVec2_other
  ld bc,6
  ldir

  call addtoVec2 ; result in vec1

  ld a,(ix+0)  ; x
  ld h,(ix+1)
  ld l,(ix+2)
  
  call writeAHL

  ld a,(ix+3)  ; y
  ld h,(ix+4)
  ld l,(ix+5)

  call writeAHL

  ret

; ----------------------------------------------------------------
; test subfromVec2
; ----------------------------------------------------------------

subfromVec2_test:
  ld ix,vector2
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0

  ld ix,vector1
  ld (ix+0),40h; 2.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),41h; 4.0
  ld (ix+4),0
  ld (ix+5),0

  ld hl,vector2
  ld de,subfromVec2_other
  ld bc,6
  ldir

  call subfromVec2 ; result in vec1: (2,4)-(4,2) = (-2,2)

  ld a,(ix+0)  ; x=-2
  ld h,(ix+1)
  ld l,(ix+2)
  
  call writeAHL

  ld a,(ix+3)  ; y=2
  ld h,(ix+4)
  ld l,(ix+5)

  call writeAHL

  ret

; ----------------------------------------------------------------
; minusVec2_test
; ----------------------------------------------------------------

minusVec2_test:
  ld ix,minusVec2_v
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0

  call minusVec2
  
  ld ix,minusVec2_res
  call writeVec2
  ret

; ----------------------------------------------------------------
; scaledVec2_test
; ----------------------------------------------------------------

scaledVec2_test:
  ld ix,scaledVec2_v
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0
  
  ld ix,scaledVec2_s 
  ld (ix+0),$BE   ; -0.5
  ld (ix+1),0
  ld (ix+2),0

  call scaledVec2
  
  ld ix,scaledVec2_res
  call writeVec2
  ret

; ----------------------------------------------------------------
; scaleVec2_test
; ----------------------------------------------------------------

scaleVec2_test:
  ld ix,scaleVec2_a
  ld (ix+0),$BE   ; -0.5
  ld (ix+1),0
  ld (ix+2),0

  ld ix,vector1
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0

  call scaleVec2
  
  call writeVec2
  ret

; ----------------------------------------------------------------
; sumVec2_test
; ----------------------------------------------------------------

sumVec2_test:

  ld ix,sumVec2_a
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),$BE; -0.5
  ld (ix+4),0
  ld (ix+5),0

  ld ix,sumVec2_b
  ld (ix+0),$42; 11.0
  ld (ix+1),$60
  ld (ix+2),0

  ld (ix+3),41h; 4.0
  ld (ix+4),0
  ld (ix+5),0

  call sumVec2
  
  ld ix,sumVec2_res
  call writeVec2
  ret

; ----------------------------------------------------------------
; diffVec2_test
; ----------------------------------------------------------------

diffVec2_test:

  ld ix,diffVec2_a
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),$BE; -0.5
  ld (ix+4),0
  ld (ix+5),0

  ld ix,diffVec2_b
  ld (ix+0),$42; 11.0
  ld (ix+1),$60
  ld (ix+2),0

  ld (ix+3),41h; 4.0
  ld (ix+4),0
  ld (ix+5),0

  call diffVec2
  
  ld ix,diffVec2_res
  call writeVec2
  ret

; ----------------------------------------------------------------
; test Transpose
; 2 -2  ->   2  4
; 4 -1      -2 -1
; ----------------------------------------------------------------

Transpose_test:
  ld ix,Transpose_mat
  ld (ix+0),40h ; 2.0
  ld (ix+1),0
  ld (ix+2),0
  
  ld (ix+3),41h ; 4.0
  ld (ix+4),0
  ld (ix+5),0
  
  ld (ix+Mat22_col2+0),0xC0 ; -2.0
  ld (ix+Mat22_col2+1),0
  ld (ix+Mat22_col2+2),0

  ld (ix+Mat22_col2+3),0xBF ; -1.0
  ld (ix+Mat22_col2+4),0
  ld (ix+Mat22_col2+5),0
  
  call Transpose
  
  ld ix,Transpose_res

  call writeMat22

  ret  

; ----------------------------------------------------------------
; test initMat22
; angle = pi/6 = 30 deg  
; sqrt(3)/2 -1/2
; 1/2       sqrt(3)/2
; ----------------------------------------------------------------

mat: ds 12
initMat22_test:
  ld ix,initMat22_angle
  ld (ix+0),$3E; pi/6
  ld (ix+1),$0C
  ld (ix+2),$15
  
  ld hl,mat
  
  call initMat22
  
  ld ix,mat
  call writeMat22  

  ret

; ----------------------------------------------------------------
; test matmul
; 2 -2   * 4 = 4
; 4 -0.5   2   15
; ----------------------------------------------------------------

matmul_test:
  ld ix,matmul_A
  ld (ix+0),40h ; 2.0
  ld (ix+1),0
  ld (ix+2),0
  
  ld (ix+3),41h ; 4.0
  ld (ix+4),0
  ld (ix+5),0
  
  ld (ix+Mat22_col2+0),0xC0 ; -2.0
  ld (ix+Mat22_col2+1),0
  ld (ix+Mat22_col2+2),0

  ld (ix+Mat22_col2+3),0xBE ; -0.5
  ld (ix+Mat22_col2+4),0
  ld (ix+Mat22_col2+5),0
  
  ld ix,matmul_v
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0
  
  call matmul
  
  ld ix,matmul_res

  call writeVec2
  
  ret

; ----------------------------------------------------------------
; matmulMM_test
; 2 -2     * 2 3  = 4 -16
; 4 -0.5     0 11   8 6.5
; ----------------------------------------------------------------

matmulMM_test:
  
  ld ix,matmulMM_A

  ld (ix+0),$40 ; 2.0
  ld (ix+1),0
  ld (ix+2),0
  
  ld (ix+3),$41 ; 4.0
  ld (ix+4),0
  ld (ix+5),0
  
  ld (ix+Mat22_col2+0),$C0 ; -2.0
  ld (ix+Mat22_col2+1),0
  ld (ix+Mat22_col2+2),0

  ld (ix+Mat22_col2+3),$BE ; -0.5
  ld (ix+Mat22_col2+4),0
  ld (ix+Mat22_col2+5),0
  
  ld ix,matmulMM_B
  
  ld (ix+0),$40 ; 2.0
  ld (ix+1),0
  ld (ix+2),0
  
  ld (ix+3),0 ; 0.0
  ld (ix+4),0
  ld (ix+5),0
  
  ld (ix+Mat22_col2+0),$40 ; 3.0
  ld (ix+Mat22_col2+1),$80
  ld (ix+Mat22_col2+2),0

  ld (ix+Mat22_col2+3),$42 ; 11
  ld (ix+Mat22_col2+4),$60
  ld (ix+Mat22_col2+5),0
  
  call matmulMM

  ld ix,matmulMM_res
  call writeMat22
  
  ret

; ----------------------------------------------------------------
; Dot_test
; (4,2).(3,11) = 12+22 = 34
; ----------------------------------------------------------------
  
Dot_test:

  ld ix,Dot_a
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0

  ld ix,Dot_b
  ld (ix+0),$40; 3.0
  ld (ix+1),$80
  ld (ix+2),0

  ld (ix+3),$42; 11
  ld (ix+4),$60
  ld (ix+5),0
  
  call Dot

  ld ix,Dot_res
  ld a,(ix+0)
  ld h,(ix+1)
  ld l,(ix+2)
  
  call writeAHL
  ret

; ----------------------------------------------------------------
; Crossvv_test
; (4,2)x(11,3) = 12-22 = -10
; ----------------------------------------------------------------

Crossvv_test:

  ld ix,Crossvv_a
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),40h; 2.0
  ld (ix+4),0
  ld (ix+5),0

  ld ix,Crossvv_b
  ld (ix+0),$42; 11
  ld (ix+1),$60
  ld (ix+2),0

  ld (ix+3),$40; 3.0
  ld (ix+4),$80
  ld (ix+5),0
  
  call Crossvv

  ld ix,Crossvv_res
  ld a,(ix+0)
  ld h,(ix+1)
  ld l,(ix+2)
  
  call writeAHL
  
  ret

; ----------------------------------------------------------------
; Absv_test
; ----------------------------------------------------------------

Absv_test:

  ld ix,Absv_a
  ld (ix+0),41h; 4.0
  ld (ix+1),0
  ld (ix+2),0

  ld (ix+3),$C0; -2.0
  ld (ix+4),0
  ld (ix+5),0

  call Absv
  
  ld ix,Absv_res
  call writeVec2
  
  ret

; ----------------------------------------------------------------
; AbsM_test
; ----------------------------------------------------------------
  
AbsM_test:

  ld ix,AbsM_A

  ld (ix+0),$40 ; 2.0
  ld (ix+1),0
  ld (ix+2),0
  
  ld (ix+3),$41 ; 4.0
  ld (ix+4),0
  ld (ix+5),0
  
  ld (ix+Mat22_col2+0),$C0 ; -2.0
  ld (ix+Mat22_col2+1),0
  ld (ix+Mat22_col2+2),0

  ld (ix+Mat22_col2+3),$BE ; -0.5
  ld (ix+Mat22_col2+4),0
  ld (ix+Mat22_col2+5),0

  call AbsM
  
  ld ix,AbsM_res
  call writeMat22
  ret

; ----------------------------------------------------------------
; Flip_test
; {1, 2, 3, 4} -> {3, 4, 1, 2}
; ----------------------------------------------------------------

edges1: db 1,2,3,4  
Flip_test:
  ld ix,edges1
  call Flip
  
  ld hl,0
  ld (writeAHL_pp),hl

  ld a,(edges1)
  call writeByte

  ld a,(edges1+1)
  call writeByte

  ld a,(edges1+2)
  call writeByte

  ld a,(edges1+3)
  call writeByte
  
  ret

; ----------------------------------------------------------
; wat pause until S key pressed
; ----------------------------------------------------------

wat_cnt: db 0
wat: 
    ld a,(wat_cnt)
    inc a
    ld (wat_cnt),a
	
    ld hl,reslt
    call u8toh

    ld ix,reslt     ; string to print
    ld hl,32*23 ; print pos from top-left
    ld a,00111010b  ; ink 2, paper 7, not bright, not flash
    ld b,2          ; no. chars to print
    call me

wat1:    
    ld a,253   ; wait until S is pressed
    in a,(254)
    bit 1,a
    jr nz,wat1
	
    call cl
    ld hl,0
    ld (writeAHL_pp),hl
    ret

; ----------------------------------------------------------------
; writeVec2. Write vec at ix on the next line down
; ----------------------------------------------------------------

writeVec2:
  ld hl,(writeAHL_pp); move to start of next line
  ld bc,32
  add hl,bc
  ld a,l
  and 11100000b
  ld l,a
  ld (writeAHL_pp),hl

  ld a,(ix+0)
  ld h,(ix+1)
  ld l,(ix+2)

  call writeAHL

  ld hl,(writeAHL_pp)
  inc hl
  ld (writeAHL_pp),hl

  ld a,(ix+3)
  ld h,(ix+4)
  ld l,(ix+5)
  
  call writeAHL
  ret
  
; ----------------------------------------------------------------
; writeMat22
; ----------------------------------------------------------------
  
writeMat22:
  ld hl,0
  ld (writeAHL_pp),hl

  ld a,(ix+0)
  ld h,(ix+1)
  ld l,(ix+2)
  
  call writeAHL

  ld hl,32
  ld (writeAHL_pp),hl

  ld a,(ix+3)
  ld h,(ix+4)
  ld l,(ix+5)
  
  call writeAHL

  ld hl,10
  ld (writeAHL_pp),hl
  
  ld a,(ix+Mat22_col2+0)
  ld h,(ix+Mat22_col2+1)
  ld l,(ix+Mat22_col2+2)
  
  call writeAHL

  ld hl,42
  ld (writeAHL_pp),hl

  ld a,(ix+Mat22_col2+3)
  ld h,(ix+Mat22_col2+4)
  ld l,(ix+Mat22_col2+5)
  
  call writeAHL
  ret

; ----------------------------------------------------------------
; writeByte. Write single integer byte
; ----------------------------------------------------------------

writeByte:
  ld hl,reslt
  call u8toh
  ld ix,reslt     ; string to print
  ld hl,(writeAHL_pp) ; print pos from top-left
  ld a,00111001b  ; ink 1, paper 7, not bright, not flash
  ld b,2          ; no. chars to print
  call me
  ld (writeAHL_pp),hl
  ret

; ----------------------------------------------------------------
; writeAHL. write f24 float
; ----------------------------------------------------------------
  
writeAHL_pp: dw 0
writeAHL:

  push ix
  push hl

  ld hl,reslt
  call u8toh

  ld ix,reslt     ; string to print
  ld hl,(writeAHL_pp) ; print pos from top-left
  ld a,00111001b  ; ink 1, paper 7, not bright, not flash
  ld b,2          ; no. chars to print
  call me
  ld (writeAHL_pp),hl

  pop hl

  push hl

  ld a,h  
  ld hl,reslt
  call u8toh

  ld ix,reslt     ; string to print
  ld hl,(writeAHL_pp)         ; print pos from top-left
  ld a,00111001b  ; ink 1, paper 7, not bright, not flash
  ld b,2          ; no. chars to print
  call me
  ld (writeAHL_pp),hl

  pop hl

  ld a,l  
  ld hl,reslt
  call u8toh

  ld ix,reslt     ; string to print
  ld hl,(writeAHL_pp)         ; print pos from top-left
  ld a,00111001b  ; ink 1, paper 7, not bright, not flash
  ld b,2          ; no. chars to print
  call me
  ld (writeAHL_pp),hl
    
  pop ix
  
  ret

include "b2d.z80"

